set.seed(123)
data(iris)
head(iris, 3)
library(dispRity)
refresh.dispRity()
check.metric(mean)
check.metric(function(x) return(1))
check.metric(variances)
make.metric(mean)
make.metric(mean, silent = TRUE)
make.metric(mean, silent = TRUE)$type
?get.covar
data(charadriiformes)
## Making a dispRity object with covar data
covar_data <- MCMCglmm.subsets(data       = charadriiformes$data,
posteriors = charadriiformes$posteriors)
data <- covar_data
data
data$covar[[1]]
data$call$bootstrap
data$call$bootstraps
length(data$covar[[1]])
length(data$covar[[1]][[1]])
refresh.dispRity(test.filter = "covar")
?match.tip.edges
?match.tip.edge
data(charadriiformes)
names(charadriiformes)
colnames(charadriiformes$data)
my_data <- charadriiformes$data[, "clade" ,drop = FALSE]
my_data
my_data <- charadriiformes$data[, "clade"]
my_data
names(my_data) <- rownames(charadriiformes$data)
my_data
levels(my_data)
levels(my_data) <- c("orange", "blue", "darkgreen")
my_data
match(names(my_data), tree$tip.label)
match(names(my_data), my_tree$tip.label)
my_tree <- charadriiformes$tree
my_data <- charadriiformes$data[, "clade"]
names(my_data) <- rownames(charadriiformes$data)
## Changing the levels names (the clade names) to colours
levels(my_data) <- c("orange", "blue", "darkgreen")
## Matching the data rownames to the tip order in the tree
match(names(my_data), my_tree$tip.label)
my_tree$tip.label[1]
rownames(my_data)[261]
rownames(my_data)
names(my_data)[261]
match(my_tree$tip.label, names(my_data))
names(my_data)[329]
?match.tip.ege
?match.tip.edge
clade_edges <- match.tip.edge(my_data, my_tree, replace.na = "grey")
clade_edges
my_data <- as.character(my_data)
my_data
clade_edges <- match.tip.edge(my_data, my_tree, replace.na = "grey")
clade_edges
plot(tree, show.tip.label = FALSE, edge.colors = clade_edges)
plot(my_tree, show.tip.label = FALSE, edge.colors = clade_edges)
plot(my_tree, show.tip.label = FALSE, edge.colors = clade_edges)
plot(my_tree, show.tip.label = FALSE, edge.color = clade_edges)
## Loading the charadriiformes data
data(charadriiformes)
## Extracting the tree
my_tree <- charadriiformes$tree
## Extracting the data column that contains the clade assignments
my_data <- charadriiformes$data[, "clade"]
names(my_data) <- rownames(charadriiformes$data)
## Changing the levels names (the clade names) to colours
levels(my_data) <- c("orange", "blue", "darkgreen")
my_data <- as.character(my_data)
## Matching the data rownames to the tip order in the tree
my_data <- my_data[match(my_tree$tip.label, names(my_data))]
clade_edges <- match.tip.edge(my_data, my_tree, replace.na = "grey")
plot(my_tree, show.tip.label = FALSE, edge.color = clade_edges)
clade_edges <- match.tip.edge(my_data, my_tree, replace.na = "grey")
my_data
## Loading the charadriiformes data
data(charadriiformes)
## Extracting the tree
my_tree <- charadriiformes$tree
## Extracting the data column that contains the clade assignments
my_data <- charadriiformes$data[, "clade"]
names(my_data) <- rownames(charadriiformes$data)
levels(my_data) <- c("orange", "blue", "darkgreen")
my_data <- as.character(my_data)
my_data
my_data <- my_data[match(my_tree$tip.label, rownames(charadriiformes$data))]
clade_edges <- match.tip.edge(my_data, my_tree, replace.na = "grey")
plot(my_tree, show.tip.label = FALSE, edge.color = clade_edges)
plot(ladderize(my_tree), show.tip.label = FALSE, edge.color = clade_edges)
my_data <- my_data[match(ladderize(my_tree)$tip.label, rownames(charadriiformes$data))]
plot(ladderize(my_tree), show.tip.label = FALSE, edge.color = clade_edges)
my_tree_modif$edgelength
my_tree_modif <- my_tree
my_tree_modif$edgelength
names(my_tree)
my_tree_modif$edge.length[which(clade_edges == "darkgreen")]
my_tree_modif$edge.length[green_clade] <-
axisPhylo()
## Adding a fixed edge length to the green clade
my_tree_modif <- my_tree
green_clade <- which(clade_edges == "darkgreen")
my_tree_modif$edge.length[green_clade] <- 1
plot(ladderize(my_tree_modif), show.tip.label = FALSE, edge.color = clade_edges)
nodelabels()
tree <- extract.clade(my_tree, node = 621)
plot(ladderize(tree))
5)
plot(ladderize(tree), cex = 0.5)
tree <- extract.clade(my_tree, node = 621)
plot(ladderize(tree), cex = 0.5)
charadriiformes$data["Pluvarius_aegypticus"]
charadriiformes$data["Pluvarius_aegypticus", ]
charadriiformes$data["Pluviarus_aegypticus", ]
grep("Pluv", rownames(charadriiformes$data))
rownames(charadriiformes$data)[c(231:236)]
rownames(charadriiformes$data)[c(231:236), ]
charadriiformes$data[c(231:236), ]
load(file = "covar_char_data.rda")
setwd("/home/tguillerme/Packaging/dispRity/tests/testthat/make.data")
load(file = "covar_char_data.rda")
setwd("/home/tguillerme/Packaging/dispRity/tests/testthat/make.data")
load(file = "covar_tree_data.rda")
library(MCMCglmm)
covar_char_data["Pluvianus_aegyptius", ]
covar_char_data["Pluvianus_aegyptius", "clade"]
covar_char_data["Pluvianus_aegyptius", "clade"] <- "plovers"
covar_char_data["Pluvianus_aegyptius"
]
covar_char_data["Pluvianus_aegyptius", "clade"]
ntraits <- 3 #this refers to the number of traits in the covariance matrix. Here we are using 3 througout
# The simplest model simply estimates the overal covariance matrix for the whole data set
model1 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait-1, family = rep("gaussian", ntraits),
rcov=
~ us(trait):units,
data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# The next model, still without phylogeny, involves modelling clade effect
# Note that we are using clade both in the fixed effects and in the random effects
# The random effects relate to covariances and main effects to means
model2<- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait:clade-1, family = rep("gaussian", ntraits),
rcov=
~ us(at.level(clade,1):trait):units
+ us(at.level(clade,2):trait):units
+ us(at.level(clade,3):trait):units,
data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# Now we will add phylogeny. To begin with we will not include the clade (gull, plover, sandpiper) effect
# and instead just partition covariances into phylogenetic and non-phylogenetic effects.
# At this point the model is becoming more complex and we need to specific a prior.
priorRG1 <- list(R=list(
R1 = list(V = diag(ntraits), nu = 0.002)),
G=list(
G1 = list(V = diag(ntraits), nu = 0.002)))
model3 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait-1, family = rep("gaussian", ntraits),
random =
~ us(trait):animal,
rcov=
~ us(trait):units,
prior= priorRG1, pedigree = covar_tree_data, data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# Now we will add phylogeny with the clade (gull, plover, sandpiper) effect
# This model has a single overall phylogenetic effects and clade specific non-phylogenetic effects
# Note the changes to the prior specification as well as the main model
# This is the model that I would suggest using to test for changes in clade covariances relative to phylogeny to test which clades innovate/elaborate
priorRG2 <- list(R=list(
R1 = list(V = diag(ntraits), nu = 0.002),
R2 = list(V = diag(ntraits), nu = 0.002),
R3 = list(V = diag(ntraits), nu = 0.002)),
G=list(
G1 = list(V = diag(ntraits), nu = 0.002)))
model4 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait:clade-1, family = rep("gaussian", ntraits),
random =
~ us(trait):animal,
rcov=
~ us(at.level(clade,1):trait):units
+ us(at.level(clade,2):trait):units
+ us(at.level(clade,3):trait):units,
prior= priorRG2, pedigree = covar_tree_data, data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# Now we will add phylogeny with phylogenetic and non-phylogenetic clade (gull, plover, sandpiper) effects
# This model has a single overall phylogenetic effects and clade specific non-phylogenetic effects
# Note the changes to the prior specification as well as the main model
# This is the model that I would suggest using to test for changes in clade covariances relative to phylogeny to test which clades innovate/elaborate
priorRG3 <- list(R=list(
R1 = list(V = diag(ntraits), nu = 0.002),
R2 = list(V = diag(ntraits), nu = 0.002),
R3 = list(V = diag(ntraits), nu = 0.002)),
G=list(
G1 = list(V = diag(ntraits), nu = 0.002),
G2 = list(V = diag(ntraits), nu = 0.002),
G3 = list(V = diag(ntraits), nu = 0.002)))
model5 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait:clade-1, family = rep("gaussian", ntraits),
random =
~ us(at.level(clade,1):trait):animal
+ us(at.level(clade,2):trait):animal
+ us(at.level(clade,3):trait):animal,
rcov=
~ us(at.level(clade,1):trait):units
+ us(at.level(clade,2):trait):units
+ us(at.level(clade,3):trait):units,
prior= priorRG3, pedigree = covar_tree_data, data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# Now we will add phylogeny with phylogenetic and non-phylogenetic clade (gull, plover, sandpiper) effects and an overall phylogenetic effect
# This may well stretch the limits of the data in many cases
priorRG4 <- list(R=list(
R1 = list(V = diag(ntraits), nu = 0.002),
R2 = list(V = diag(ntraits), nu = 0.002),
R3 = list(V = diag(ntraits), nu = 0.002)),
G=list(
G1 = list(V = diag(ntraits), nu = 0.002),
G2 = list(V = diag(ntraits), nu = 0.002),
G3 = list(V = diag(ntraits), nu = 0.002),
G4 = list(V = diag(ntraits), nu = 0.002)))
model6 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait:clade-1, family = rep("gaussian", ntraits),
random =
~ us(at.level(clade,1):trait):animal
+ us(at.level(clade,2):trait):animal
+ us(at.level(clade,3):trait):animal
+ us(trait):animal,
rcov=
~ us(at.level(clade,1):trait):units
+ us(at.level(clade,2):trait):units
+ us(at.level(clade,3):trait):units,
prior= priorRG4, pedigree = covar_tree_data, data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
# Finally, a possible alternative to model 4. Here we have a background phylogenetic component, clade specific phylogenetic components, and a general non-phylogenetic effect
# I _think_ this might be correct model for clade to global comparison.
priorRG5 <- list(R=list(
R1 = list(V = diag(ntraits), nu = 0.002)),
G=list(
G1 = list(V = diag(ntraits), nu = 0.002),
G2 = list(V = diag(ntraits), nu = 0.002),
G3 = list(V = diag(ntraits), nu = 0.002),
G4 = list(V = diag(ntraits), nu = 0.002)))
model7 <- MCMCglmm(cbind(PC1, PC2, PC3) ~ trait:clade-1, family = rep("gaussian", ntraits),
random =
~ us(at.level(clade,1):trait):animal
+ us(at.level(clade,2):trait):animal
+ us(at.level(clade,3):trait):animal
+ us(trait):animal,
rcov=
~ us(trait):units,
prior= priorRG5, pedigree = covar_tree_data, data = covar_char_data, nitt = 110000, burnin = 10000, thin = 100)
#TG: models run smooth, check with more clades and more traits
#TG: one way to increase things would be to specify more constrained priors?
covar_model_list <- list(model1, model2, model3, model4, model5, model6, model7)
save(covar_model_list, file = "covar_model_list.rda")
# MCMCglmm example data
charadriiformes <- list(data = covar_char_data, tree = covar_tree_data, posteriors = model7)
save(charadriiformes, file = "../../../Data/charadriiformes.rda")
setwd("/home/tguillerme/Packaging/dispRity/tests/testthat/make.data")
charadriiformes <- list(data = covar_char_data, tree = covar_tree_data, posteriors = model7)
save(charadriiformes, file = "../../../Data/charadriiformes.rda")
save(charadriiformes, file = "../../../data/charadriiformes.rda")
